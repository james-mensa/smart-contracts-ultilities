/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Ballot {
  export type InputCandidateStruct = {
    name: PromiseOrValue<BytesLike>;
    img_url: PromiseOrValue<BytesLike>;
  };

  export type InputCandidateStructOutput = [string, string] & {
    name: string;
    img_url: string;
  };

  export type CandidateStruct = {
    name: PromiseOrValue<BytesLike>;
    img_url: PromiseOrValue<BytesLike>;
    voteCount: PromiseOrValue<BigNumberish>;
  };

  export type CandidateStructOutput = [string, string, BigNumber] & {
    name: string;
    img_url: string;
    voteCount: BigNumber;
  };

  export type PartyStruct = {
    account: PromiseOrValue<string>;
    name: PromiseOrValue<BytesLike>;
    img_url: PromiseOrValue<BytesLike>;
  };

  export type PartyStructOutput = [string, string, string] & {
    account: string;
    name: string;
    img_url: string;
  };

  export type VoterHistoryStruct = {
    voted: PromiseOrValue<boolean>;
    delegate: PromiseOrValue<string>;
    vote: PromiseOrValue<BigNumberish>;
    candidateName: PromiseOrValue<BytesLike>;
    pool_id: PromiseOrValue<BigNumberish>;
    pool_title: PromiseOrValue<BytesLike>;
  };

  export type VoterHistoryStructOutput = [
    boolean,
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    voted: boolean;
    delegate: string;
    vote: BigNumber;
    candidateName: string;
    pool_id: BigNumber;
    pool_title: string;
  };
}

export interface BallotInterface extends utils.Interface {
  functions: {
    "Elections(uint256)": FunctionFragment;
    "addBallotEvent(uint256,(bytes32,bytes)[],bool,bytes32)": FunctionFragment;
    "addVoterToElectionEvent(uint256,address)": FunctionFragment;
    "addVotersToElectionEvent(uint256,address[])": FunctionFragment;
    "electionID()": FunctionFragment;
    "getBallot(uint256,uint256)": FunctionFragment;
    "getElection(uint256)": FunctionFragment;
    "getTime()": FunctionFragment;
    "getVoteRight(uint256)": FunctionFragment;
    "getVoteStatus(uint256)": FunctionFragment;
    "getVoterHistory(uint256)": FunctionFragment;
    "newElectionEvent(bytes,uint256,uint256,(address,bytes32,bytes)[],bytes)": FunctionFragment;
    "poolParties(uint256)": FunctionFragment;
    "totalElectionEvents()": FunctionFragment;
    "verifyVoter(uint256,address,bytes32)": FunctionFragment;
    "vote(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Elections"
      | "addBallotEvent"
      | "addVoterToElectionEvent"
      | "addVotersToElectionEvent"
      | "electionID"
      | "getBallot"
      | "getElection"
      | "getTime"
      | "getVoteRight"
      | "getVoteStatus"
      | "getVoterHistory"
      | "newElectionEvent"
      | "poolParties"
      | "totalElectionEvents"
      | "verifyVoter"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Elections",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addBallotEvent",
    values: [
      PromiseOrValue<BigNumberish>,
      Ballot.InputCandidateStruct[],
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addVoterToElectionEvent",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addVotersToElectionEvent",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "electionID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBallot",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getElection",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVoteRight",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterHistory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "newElectionEvent",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      Ballot.PartyStruct[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "poolParties",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalElectionEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyVoter",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "Elections", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBallotEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVoterToElectionEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVotersToElectionEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "electionID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBallot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoteRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newElectionEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolParties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalElectionEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {};
}

export interface Ballot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BallotInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Elections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        id: BigNumber;
        chairperson: string;
        name: string;
        startdate: BigNumber;
        enddate: BigNumber;
        total_parties: BigNumber;
        total_voters: BigNumber;
        total_ballots: BigNumber;
        img_url: string;
      }
    >;

    addBallotEvent(
      election_id: PromiseOrValue<BigNumberish>,
      _candidates: Ballot.InputCandidateStruct[],
      _general: PromiseOrValue<boolean>,
      _name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addVoterToElectionEvent(
      _electionID: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addVotersToElectionEvent(
      _electionID: PromiseOrValue<BigNumberish>,
      _voters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    electionID(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBallot(
      election_id: PromiseOrValue<BigNumberish>,
      ballot_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        Ballot.CandidateStructOutput[],
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        name: string;
        candidates: Ballot.CandidateStructOutput[];
        totalVotes: BigNumber;
        candidateCount: BigNumber;
        event_id: BigNumber;
      }
    >;

    getElection(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string[],
        string[],
        string[],
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        chairperson: string;
        name: string;
        startdate: BigNumber;
        enddate: BigNumber;
        partyNames: string[];
        partyAccount: string[];
        partyimg_urls: string[];
        total_parties: BigNumber;
        total_ballots: BigNumber;
        total_voters: BigNumber;
      }
    >;

    getTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { time: BigNumber }>;

    getVoteRight(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { rightToVote: boolean }>;

    getVoteStatus(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, Ballot.PartyStructOutput[], boolean] & {
        account: string;
        weight: BigNumber;
        totalVoteEvents: BigNumber;
        party_verified: Ballot.PartyStructOutput[];
        rightToVote: boolean;
      }
    >;

    getVoterHistory(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Ballot.VoterHistoryStructOutput[]]>;

    newElectionEvent(
      name: PromiseOrValue<BytesLike>,
      startdate: PromiseOrValue<BigNumberish>,
      enddate: PromiseOrValue<BigNumberish>,
      _parties: Ballot.PartyStruct[],
      _img_url: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolParties(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalElectionEvents(overrides?: CallOverrides): Promise<[BigNumber]>;

    verifyVoter(
      election_id: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vote(
      election_id: PromiseOrValue<BigNumberish>,
      ballot_id: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  Elections(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      id: BigNumber;
      chairperson: string;
      name: string;
      startdate: BigNumber;
      enddate: BigNumber;
      total_parties: BigNumber;
      total_voters: BigNumber;
      total_ballots: BigNumber;
      img_url: string;
    }
  >;

  addBallotEvent(
    election_id: PromiseOrValue<BigNumberish>,
    _candidates: Ballot.InputCandidateStruct[],
    _general: PromiseOrValue<boolean>,
    _name: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addVoterToElectionEvent(
    _electionID: PromiseOrValue<BigNumberish>,
    _voter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addVotersToElectionEvent(
    _electionID: PromiseOrValue<BigNumberish>,
    _voters: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  electionID(overrides?: CallOverrides): Promise<BigNumber>;

  getBallot(
    election_id: PromiseOrValue<BigNumberish>,
    ballot_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      Ballot.CandidateStructOutput[],
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      name: string;
      candidates: Ballot.CandidateStructOutput[];
      totalVotes: BigNumber;
      candidateCount: BigNumber;
      event_id: BigNumber;
    }
  >;

  getElection(
    election_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string[],
      string[],
      string[],
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      chairperson: string;
      name: string;
      startdate: BigNumber;
      enddate: BigNumber;
      partyNames: string[];
      partyAccount: string[];
      partyimg_urls: string[];
      total_parties: BigNumber;
      total_ballots: BigNumber;
      total_voters: BigNumber;
    }
  >;

  getTime(overrides?: CallOverrides): Promise<BigNumber>;

  getVoteRight(
    election_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getVoteStatus(
    election_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, Ballot.PartyStructOutput[], boolean] & {
      account: string;
      weight: BigNumber;
      totalVoteEvents: BigNumber;
      party_verified: Ballot.PartyStructOutput[];
      rightToVote: boolean;
    }
  >;

  getVoterHistory(
    election_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Ballot.VoterHistoryStructOutput[]>;

  newElectionEvent(
    name: PromiseOrValue<BytesLike>,
    startdate: PromiseOrValue<BigNumberish>,
    enddate: PromiseOrValue<BigNumberish>,
    _parties: Ballot.PartyStruct[],
    _img_url: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolParties(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalElectionEvents(overrides?: CallOverrides): Promise<BigNumber>;

  verifyVoter(
    election_id: PromiseOrValue<BigNumberish>,
    voter: PromiseOrValue<string>,
    name: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vote(
    election_id: PromiseOrValue<BigNumberish>,
    ballot_id: PromiseOrValue<BigNumberish>,
    choice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Elections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        id: BigNumber;
        chairperson: string;
        name: string;
        startdate: BigNumber;
        enddate: BigNumber;
        total_parties: BigNumber;
        total_voters: BigNumber;
        total_ballots: BigNumber;
        img_url: string;
      }
    >;

    addBallotEvent(
      election_id: PromiseOrValue<BigNumberish>,
      _candidates: Ballot.InputCandidateStruct[],
      _general: PromiseOrValue<boolean>,
      _name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addVoterToElectionEvent(
      _electionID: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addVotersToElectionEvent(
      _electionID: PromiseOrValue<BigNumberish>,
      _voters: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    electionID(overrides?: CallOverrides): Promise<BigNumber>;

    getBallot(
      election_id: PromiseOrValue<BigNumberish>,
      ballot_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        Ballot.CandidateStructOutput[],
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        name: string;
        candidates: Ballot.CandidateStructOutput[];
        totalVotes: BigNumber;
        candidateCount: BigNumber;
        event_id: BigNumber;
      }
    >;

    getElection(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string[],
        string[],
        string[],
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        chairperson: string;
        name: string;
        startdate: BigNumber;
        enddate: BigNumber;
        partyNames: string[];
        partyAccount: string[];
        partyimg_urls: string[];
        total_parties: BigNumber;
        total_ballots: BigNumber;
        total_voters: BigNumber;
      }
    >;

    getTime(overrides?: CallOverrides): Promise<BigNumber>;

    getVoteRight(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getVoteStatus(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, Ballot.PartyStructOutput[], boolean] & {
        account: string;
        weight: BigNumber;
        totalVoteEvents: BigNumber;
        party_verified: Ballot.PartyStructOutput[];
        rightToVote: boolean;
      }
    >;

    getVoterHistory(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Ballot.VoterHistoryStructOutput[]>;

    newElectionEvent(
      name: PromiseOrValue<BytesLike>,
      startdate: PromiseOrValue<BigNumberish>,
      enddate: PromiseOrValue<BigNumberish>,
      _parties: Ballot.PartyStruct[],
      _img_url: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    poolParties(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalElectionEvents(overrides?: CallOverrides): Promise<BigNumber>;

    verifyVoter(
      election_id: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      election_id: PromiseOrValue<BigNumberish>,
      ballot_id: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    Elections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBallotEvent(
      election_id: PromiseOrValue<BigNumberish>,
      _candidates: Ballot.InputCandidateStruct[],
      _general: PromiseOrValue<boolean>,
      _name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addVoterToElectionEvent(
      _electionID: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addVotersToElectionEvent(
      _electionID: PromiseOrValue<BigNumberish>,
      _voters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    electionID(overrides?: CallOverrides): Promise<BigNumber>;

    getBallot(
      election_id: PromiseOrValue<BigNumberish>,
      ballot_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getElection(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTime(overrides?: CallOverrides): Promise<BigNumber>;

    getVoteRight(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteStatus(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterHistory(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newElectionEvent(
      name: PromiseOrValue<BytesLike>,
      startdate: PromiseOrValue<BigNumberish>,
      enddate: PromiseOrValue<BigNumberish>,
      _parties: Ballot.PartyStruct[],
      _img_url: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolParties(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalElectionEvents(overrides?: CallOverrides): Promise<BigNumber>;

    verifyVoter(
      election_id: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vote(
      election_id: PromiseOrValue<BigNumberish>,
      ballot_id: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Elections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBallotEvent(
      election_id: PromiseOrValue<BigNumberish>,
      _candidates: Ballot.InputCandidateStruct[],
      _general: PromiseOrValue<boolean>,
      _name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addVoterToElectionEvent(
      _electionID: PromiseOrValue<BigNumberish>,
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addVotersToElectionEvent(
      _electionID: PromiseOrValue<BigNumberish>,
      _voters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    electionID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBallot(
      election_id: PromiseOrValue<BigNumberish>,
      ballot_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getElection(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVoteRight(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteStatus(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterHistory(
      election_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newElectionEvent(
      name: PromiseOrValue<BytesLike>,
      startdate: PromiseOrValue<BigNumberish>,
      enddate: PromiseOrValue<BigNumberish>,
      _parties: Ballot.PartyStruct[],
      _img_url: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolParties(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalElectionEvents(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyVoter(
      election_id: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      election_id: PromiseOrValue<BigNumberish>,
      ballot_id: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
